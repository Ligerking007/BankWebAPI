<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #> 
<#@ import namespace="System.Reflection" #>
    
<#
	string inputFile = @"..\Repository.Models\BankDB\";
	string MapPathCombine = Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile) , inputFile);
	string output = Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile) , @".\BankDB");
   	DirectoryInfo d = new DirectoryInfo(MapPathCombine);

    FileInfo[] Files = d.GetFiles("*.cs");
    //string str = "";
	
    foreach(FileInfo file in Files )
    {
		var modelName = Path.GetFileNameWithoutExtension(file.Name);
		if(modelName.IndexOf("Context") != -1){
			continue;
		}
        
#>
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Repository.Models.BankDB;

namespace Repository.Interfaces.BankDB
{

	public interface I<#=modelName#>Repository : IGenericRepository<<#=modelName#>>
	{
		
	}
}


<#
  // End of file.
  SaveOutput("I" + modelName + "Repository.cs",output);
}
#>
<#+
    private void SaveOutput(string outputFileName,string output) {
      string templateDirectory = output;
	  bool exists = System.IO.Directory.Exists(output);

	  if(!exists){
		System.IO.Directory.CreateDirectory(output);
	  }
    
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>